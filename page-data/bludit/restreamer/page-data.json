{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/bludit/restreamer",
    "result": {"data":{"allBluditPages":{"edges":[{"node":{"title":"Restreamer Node","content":"<p>Recently I have been working on setting up a live stream for my son's pet Leopard Gecko. We originally set it up a year or so ago using an old Android phone using <a href=\"https://www.youtube.com/live\">YouTube live streaming</a>. However, YouTube changed the requirements for this method. They now require that your channel has over 1000 subscribers. After that change we attempted to use <a href=\"https://play.google.com/store/apps/details?id=com.pas.webcam.pro&amp;hl=en_US\">IP Web Cam Pro</a> also on an old Android phone. This worked pretty well, however, the phone's battery would die after a few hours even though it was plugged in.</p>\n<p>I finally decided to purchase some low end IP cameras and give those a shot. I found a two pack of <a href=\"https://www.amazon.com/Wyze-Indoor-Wireless-Camera-Vision/dp/B07G2YR23M/\">Wyze Cams</a>. I was hoping that they would have the ability to view the steam via a browser on my local network. I could then simply setup a reverse proxy on the Pi Lab load balancer and share it. Unfortunately that was not the case. </p>\n<p>After some research I found that <a href=\"https://wyze.com/\">Wyze</a> has a <a href=\"https://support.wyzecam.com/hc/en-us/articles/360026245231-Wyze-Cam-RTSP\">beta firmware</a> that provides the ability to stream via RTSP. The installation is fairly straight forward. Simply have to copy a file to an SD card and follow a few steps. This gives an extra advanced option to create an RTSP URL to allow streaming outside the app.</p>\n<p>Now that I had that I needed a way to use that stream to embed the streams on a website which was the original goal for my son's Gecko stream.</p>\n<p>This is where the new Pi Lab Restreamer Node comes in. I have setup a Raspberry Pi 4 Model B 2GB with <a href=\"https://datarhei.github.io/restreamer/\">Restreamer</a>. Restreamer is a software which allows for free real-time video streaming, e.g. transferring video signals of webcams or other video-inputs directly to your website. </p>\n<p>The setup for this was so easy! It allowed me to setup local stream URLs that I can use with a reverse proxy entry on the Pi Lab Load Balancer. It also allows me to easily push the streams to <a href=\"https://www.youtube.com/\">YouTube</a> which is what I have elected to do. </p>\n<div class=\"centered\">\n    <img src=\"/bl-content/uploads/pages/241c4852179f57be27536866df35d4ae/restreamer.png\" class=\"image-border\" /><br><br>\n</div>\n<p><strong>Here are the streams that we have setup so far.</strong></p>\n<ul>\n<li><a href=\"pi-lab-live-stream\">Pi Lab Live Stream</a></li>\n<li><a href=\"octoprint-node-live-stream\">OctoPrint Node Live Stream</a></li>\n<li><a href=\"https://tortoisecam.com\">Tortoise Cam (Russian Tortoise)</a></li>\n</ul>\n<p>So far things are working very well. I have all the streams setup to not do any additional encoding in <a href=\"https://datarhei.github.io/restreamer/\">Restreamer</a>. I found that this was not very helpful with my lower end cameras and was only causing high CPU usage. I am seeing about 3-4 Mbps upload usage on my network which I am going to keep a close eye on.</p>\n<p>The main issue that I have had is with <a href=\"https://www.youtube.com/\">YouTube</a> stopping the streams after 12 hours. This is mainly frustrating because it breaks the embed codes for the streams since the stream URL will change when I re-establish the stream. It is even odder that the <a href=\"pi-lab-live-stream\">Pi Lab Live Stream</a> hasn't stopped after over 2 days of streaming, but the others stop everyday right at 12 hours. I am not sure if the AT&amp;T Digital Life security camera that is used for the <a href=\"pi-lab-live-stream\">Pi Lab Live Stream</a> somehow has an affect. </p>\n<p>If you are looking to get into running a live stream for something like a pet definitely take a look at <a href=\"https://datarhei.github.io/restreamer/\">Restreamer</a>!</p>\n<p><strong>Updates:</strong></p>\n<blockquote>\n<p><em>I have managed to get the <a href=\"https://www.youtube.com/\">YouTube</a> live streams to not stop after 12 hours. Apparently if you use the &quot;Schedule Stream&quot; option it allows you to stream past the 12 hour mark. The <a href=\"pi-lab-live-stream\">Pi Lab Live Stream</a> was setup this way during the initial setup which is why it hadn't stopped. I have now set them all up this way.</em></p>\n<p><em>I have updated my tortoise cam with its own URL, <a href=\"https://tortoisecam.com\">TortoiseCam.com</a>. <del>It is setup to use <a href=\"https://www.earthcam.com/\">EarthCam</a> which it turns out <a href=\"https://datarhei.github.io/restreamer/\">Restreamer</a> also works with.</del></em></p>\n<p><em>I have updated the <a href=\"https://tortoisecam.com\">TortoiseCam.com</a> site to use <a href=\"https://www.youtube.com/\">YouTube</a> since I noticed <a href=\"https://www.earthcam.com/\">EarthCam</a> uses ugly ads that seemed sketchy.</em></p>\n<p><em>I have continued to have issues with <a href=\"https://www.youtube.com/\">YouTube</a> ending the tortoise cam stream. So I have gone back to <a href=\"https://www.earthcam.com/\">EarthCam</a>. To get around the sketchy ads in the <a href=\"https://www.earthcam.com/\">EarthCam</a> embed I have setup a scraper to grab the m3u8 file directly for <a href=\"https://tortoisecam.com\">TortoiseCam.com</a>.</em></p>\n<p><em>I have upgraded the Restreamer Node to a <a href=\"https://deviwiki.com/wiki/RPF_Raspberry_Pi_4_Model_B_4GB\">Raspberry Pi 4 Model B (4GB)</a>.</em></p>\n<p><em>I have added the  <a href=\"octoprint-node-live-stream\">OctoPrint Node Live Stream</a></em>.</p>\n<p>*I have extended the Restreamer node to act as a secondary Pi-hole. Check out my new dual Pi-hole + Tailscale setup <a href=\"dual-pi-hole-tailscale\">here</a>.</p>\n</blockquote>"}}]}},"pageContext":{"slug":"restreamer"}},
    "staticQueryHashes": []}